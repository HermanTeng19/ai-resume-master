export interface AIServiceResponse {
  success: boolean;
  content?: string;
  error?: string;
  model?: string; // AI模型信息
}

export class AIService {
  private static readonly GEMINI_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent';
  private static readonly SILICONFLOW_URL = 'https://api.siliconflow.cn/v1/chat/completions';

  static async generateResume(prompt: string, selectedModel?: string): Promise<AIServiceResponse> {
    const aiService = selectedModel || process.env.AI_SERVICE || 'gemini';
    
    try {
      if (aiService === 'gemini') {
        return await this.callGemini(prompt);
      } else if (aiService === 'deepseek') {
        return await this.callDeepSeek(prompt);
      } else {
        return {
          success: false,
          error: 'Invalid AI service configuration. Supported models: "gemini" or "deepseek".'
        };
      }
    } catch (error) {
      console.error('AI Service Error:', error);
      return {
        success: false,
        error: 'Failed to generate resume. Please try again later.'
      };
    }
  }

  private static async callGemini(prompt: string): Promise<AIServiceResponse> {
    const apiKey = process.env.GOOGLE_API_KEY;
    
    if (!apiKey) {
      return {
        success: false,
        error: 'Google API key not configured. Please set GOOGLE_API_KEY environment variable.'
      };
    }

    const response = await fetch(`${this.GEMINI_URL}?key=${apiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 8192,
        }
      })
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      return {
        success: false,
        error: `Gemini API error: ${response.status} ${response.statusText} - ${errorData.error?.message || 'Unknown error'}`
      };
    }

    const data = await response.json();
    const content = data.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!content) {
      return {
        success: false,
        error: 'No content generated by Gemini API'
      };
    }

    return {
      success: true,
      content: content.trim(),
      model: 'Google Gemini 2.5 Flash Preview'
    };
  }

  private static async callDeepSeek(prompt: string): Promise<AIServiceResponse> {
    const apiKey = process.env.SILICONFLOW_API_KEY;
    
    if (!apiKey) {
      return {
        success: false,
        error: 'Siliconflow API key not configured. Please set SILICONFLOW_API_KEY environment variable.'
      };
    }

    const response = await fetch(this.SILICONFLOW_URL, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'deepseek-ai/DeepSeek-V3',
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 8192,
        top_p: 0.95,
        frequency_penalty: 0.5,
        stream: false
      })
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      return {
        success: false,
        error: `Siliconflow API error: ${response.status} ${response.statusText} - ${errorData.error?.message || 'Unknown error'}`
      };
    }

    const data = await response.json();
    const content = data.choices?.[0]?.message?.content;

    if (!content) {
      return {
        success: false,
        error: 'No content generated by DeepSeek API'
      };
    }

    return {
      success: true,
      content: content.trim(),
      model: 'DeepSeek V3 (via Siliconflow)'
    };
  }
} 